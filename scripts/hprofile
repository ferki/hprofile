#!/bin/bash
#
# Header: hprofile
# Aythor:
# 	Copyright (c) 2003-2004 Martin Aspeli <optilude@gmx/net>
# 	Copyright (c) 2014 -tclover <tokiclover@gmail.com>
# License: GPL-2
#

shopt -qs nullglob
shopt -qs extglob

declare -A PKG
PKG=(
	[name]=hprofile
	[version]=3.0
	[confdir]=/etc/hprofile
	[logfile]=/var/log/hprofile.log
)

if [[ -f "${PKG[confdir]}/${PKG[name]}.conf" ]]; then
	declare -A HPROFILE
	source "${PKG[confdir]}/${PKG[name]}.conf"
fi

function print-error {
	if [[ "${HPROFILE[logfile]}" ]]; then
		echo "$(date '+%Y-%m-%d-%T') ${PKG[name]}: ${@}" >>"${HPROFILE[logfile]}"
	else
		echo -e "\e[1;31m* \e[0m${PKG[name]}: ${@}" >&2
	fi
}

function die {
	local ret=$?
	print-error "$@"
	return $ret
}

function print-info {
	if [[ "${HPROFILE[logfile]}" ]]; then
		echo "$(date '+%Y-%m-%d-%T') ${PKG[name]}: ${@}" >>"${HPROFILE[logfile]}"
	else
		echo -e "\e[1;32m \e[0m${PKG[name]}: ${@}"
	fi
}

function print-usage {
	cat <<-EOH
  ${PKG[name]}-${PKG[version]}
  usage: ${PKG[name]} [options] <type>|<type>.<profile>

    -t, --type               Print all known profiles types and exit
    -c, --current=<type>     Print the current <type> profile and exit
    -p, --profile=<type>     Print the profile <type> that would be used
    -P, --previous=<type>    Print the previous <type> profile and exit
    -l, --list=<type>        Print all available <type> profiles and exit
    -s, --stop=<type>        Stop the current <type> profile and exit
    -r, --revert=<type>      Revert to the previous <type> profile
    -u, --user=\$USER         Use a user profile instead of system wide
    -h, --help               Print this help message and exit
    -v, --version            Print version tring nd exit
    -r, --revert=<type>[.<profile>] Revert <profile> profile type

  <type>                     Switch to the currently valid <type> profile
  <type>.<profile>           Switch to the given <type>.<profile> profile
EOH
exit ${1:-?}
}

function print-version {
	echo "${PKG[name]}-${PKG[version]}"
	exit
}

# @DESCRIPTION: Verify validity of a profile type is valid, i.e. it has a
# directory in /etc/hprofile/profiles.
# @ARGUMENTS: the profile type
function verify-profile-type {
	test "${#}" -eq 1 -a -n "${1}" || return
	local dir="${PROFILE[dir]}/profiles/${1}"
	test -e "${dir}"/ptest -o -f "${dir}"/profiles -o -f "${dir}"/default
}

# @DESCRIPTION: Print the profile to be used. This will call hpdet if no profile
# was specified or invalid if not.
# @Arguments: <type> <profile>
function get-profile {
	local dir="${PROFILE[dir]}/profiles/${1}" name="${2}"

	test -z "${name}" -a -s "${dir}/ptest"   && name=$(run-script "${dir}/ptest")
	test -z "${name}" -a -s "${dir}/default" && name=$(< "${dir}/default")

	test -z "${name}" -a -s "${profiles}" &&
		name=$(sed -nre '0,/^[a-zA-Z].*/p' "${profiles}")

	echo "${name}"
}

# @DESCRIPTION: Print the currently selected profile
# @ARGUMENTS: <type>
function get-current-profile {
	[[ "${1}" ]] || return
	local file="${PROFILE[dir]}/profiles/${1}/current"

	[[ -s "${file}" ]] && echo $(< "${file}")
}

# @DESCRIPTION: Print the previous profile
# @ARGUMENTS: <type>
function get-previous-profile {
	[[ "${1}" ]] || return
	local file="${PROFILE[dir]}/profiles/${1}/previous"
	
	[[ -s "${file}" ]] && echo $(< "${file}")
}

# @DESCRIPTION: run script passed as positional parameter 1
# @ARGUMENTS: <script> <args>
function run-script {
	test "${#}" -ge 1 -a -s "${1}" || return
	local file="${1}" head="${1%/*}" tail="${1##*/}"

	if [[ -s "${head}/start" ]]; then
		function start {
			source "${head}/start"
		}
	elif [[ -s "${head}/stop" ]]; then
		function stop {
			source "${head}/stop"
		}
	fi

	local src name bash=$(type -p bash)
	for src in "${dir}"/*([:alnum:])*.bash; do
		[[ -s "${src}" ]] || continue
		name=${src##*/}
		eval "${name//\./_}"="${src}"
	done

	function script {
		source "${file}"
	}
	shift
	script "$@"
}

# @DESCRIPTION: Stop the current profile of the given type
# @ARGUMENTS: <type> <profile>
function stop-current-profile {
	local dir="${PROFILE[dir]}/profiles/${1}"
	local profile=$(get-current-profile "${1}")

	# Stop the *global* script and *profile* script if possible
	if [[ -s "${dir}/scripts/${profile}.stop" ]]; then
		run-script "${dir}/scripts/${profile}.stop" "${profile}" ||
		print-error "failed to stop ${1}.${profile} profile"
	fi
	if [[ -s "${dir}"/post-stop ]]; then
		run-script "${dir}"/post-stop "${profile}" ||
		print-error "failed to stop ${1}"
	fi

	# Clean up current/previous profile files
	echo              > "${PROFILE[dir]}/profiles/${1}/current"
	echo "${profile}" > "${PROFILE[dir]}/profiles/${1}/previous"

	return 0
}

# @DESCRIPTION: Save the current profile to 'current' in the profile directory.
# @ARGUMENTS: <type> <profile>
function save-current-profile {
	echo "${2}" >"${PROFILE[dir]}/profiles/${1}/current"
}

# @DESCRIPTION: Revert to the previous profile of the given type
# @ARGUMENTS: <type>
function revert-profile {
	local profile=$(get-previous-profile "${1}")

	[[ "${profile}" ]] || return
	apply-profile "${1}" "${profile}"
}

# @DESCRIPTION: Print all known profile types
function print-profile-types {
	for dir in "${PROFILE[dir]}/profiles"/*([:alpha:])*; do
		test -e "${dir}/ptest" -o -f "${dir}/profiles" -a -f "${dir}"/default &&
			echo -n "${dir##*/} "
	done
	echo
	exit
}

# @DESCRIPTION: Print all valid profiles of the given type
# @ARGUMENTS: <type>
function print-profiles {
	local dir="${PROFILE[dir]}/profiles/${1}"

	if [[ -s "${dir}/profiles" ]]; then
		echo $(< "${dir}/profiles")
	else
		local file name
		for file in "${dir}"/scripts/*([:alpha:])*.start; do
			name="${file##*/}"
			echo "${name%.start}"
		done
	fi
	exit
}

# @DESCRIPTION: Swap files with extension .<profile> in the appropriate profile
# directory, and replace files appropriately.
# @ARGUMENTS: <profile> <prefix> 
#   <prefix> should be "" for global profiles, or home directory for user
function swap-files {
	local profile="${1}" filesdir="${2}" logfile="${3}"
	local src dest
:	${dir="${dir%/}"}

	for src in $(find "${filesdir}" -name "*.${profile}"); do
		dest="${src#${filesdir}}"
		dest="${dest%.${profile}}"
		if test -e "${dest}" -a ! -h "${dest}"; then
			if ! diff "${dest}" "${src}" >/dev/null; then
				mv -f "${dest}"{,.bak} || error \
					"Failed to back up ${dest} file" "${logfile}"
			fi
		fi
		ln -fs "${src}" "${dest}" || error \
			"Failed to restore ${src} to ${dest}" "${logfile}"
	done
}

# @DESCRIPTION: Apply profile
# @ARGUMENTS: <type> <profile>
function apply-profile {
	local type="${1}" profile="${2}" logfile="${3}"
	local dir="${PROFILE[dir]}/profiles/${1}"
	local files="${dir}/files" scripts="${dir}/scripts"

	stop-current-profile "${type}" "${profile}"
	if [[ -s "${dir}/pre-start" ]]; then
		run-script "${dir}/pre-start" "${profile}" ||
			die "Failed to run ${dir}/pre-start"
	fi
	if [[ -d "${files}" ]]; then
		swap-files "${profile}" "${files}" "${logfile}" ||
			die "Failed to swap ${files} files"
	fi
	if [[ -s "${scripts}/${profile}.start" ]]; then
		run-script "${scripts}/${profile}.start" ||
			die "Failed to run ${scripts}/${profile}.start script"
	fi
	if [[ -s "${dir}/post-start" ]]; then
		run-script "${dir}/post-start" "${profile}" ||
			die "Failed to run ${dir}/post-start script"
	fi
	save-current-profile "${type}" "${profile}"
}

[[ "${1}" ]] || print-usage 2

declare -A PROFILE
PROFILE=(
	[dir]="${PKG[confdir]}"
)

opt="$(getopt -n ${PKG[name]} -o hvtc:P:p:l:s:r:u: -l help,previous:,version \
	-l profile:,type,current:,list:,stop:,revert,user: -- "$@" || print-usage)"
eval set -- "$opt"

while (( $# > 1 )); do
	case "${1}" in
		(-h|--help) print-usage 0;;
		(-v|--version) print-version;;
		(-t|--type)	print-profile-types;;
		(-c|--current)
			verify-profile-type "${2}" || die "Invalid profile type \"${2}\""
			get-current-profile "${2}"
			exit
			;;
		(-p|--profile)
			verify-profile-type "${2}" || die "Invalid profile type \"${2}\""
			get-profile "${2}"
			exit
			;;
		(-P|--previous)
			verify-profile-type "${2}" || die "Invalid profile type \"${2}\""
			get-profile "${2}"
			exit
			;;
		(-l|--list)
			verify-profile-type "${2}" || die "Invalid profile type ${2}"
			print-profiles "${2}"
			;;
		(-s|--stop)
			verify-profile-type "${2}" || die "Invalid profile type ${2}"

			stop_current_profile "${2}" && exit
			error "Could not stop \"${2}\" profile - unable to determine current profile"
			die "Unable to determine the current ${OPTARG} profile"
			;;
		(-r|--revert)
			verify-profile-type "${2}" || error "Invalid profile type ${2}"
			revert-profile "${2}"
			exit ${?}
			;;
		(-u|--user) PROFILE[dir]="${HOME}/.${PKG[name]}";;
		(--) shift;;
		(*) print-usage 2;;
	esac
done

PROFILE[name]=$(echo "${1}" | cut -d. -f2 -s)
PROFILE[type]="${1%.*}"

[[ "${PROFILE[type]}" ]] ||
	die "Empty/null profile type"

verify-profile-type "${PROFILE[type]}" ||
	die "Invalid profile type: ${PROFILE[type]}"

[[ "${PROFILE[name]}" ]] || PROFILE[name]=$(get-profile "${PROFILE[type]}")

[[ "${PROFILE[name]}" ]] ||
	die "Could not find ${PROFILE[name]} profile ${PROFILE[type]}"

apply-profile "${PROFILE[type]}" "${PROFILE[name]}" "${HPROFILE[logfile]}"

unset HPROFILE PKG PROFILE

#
# vim:fenc=utf-8:ft=sh:ci:pi:sts=0:sw=4:ts=4:
#
