#!/bin/sh
#
# Header: hprofile
# Aythor:
# 	Copyright (c) 2003-2004 Martin Aspeli <optilude@gmx/net>
# 	Copyright (c) 2014-2015 -tclover <tokiclover@gmail.com>
# License: GPL-2
#

if [ -n "${ZSH_VERSION}" ]; then
	emulate sh
	setopt SH_WORD_SPLIT
	setopt EXTENDED_GLOB NULL_GLOB
	disable -r end
elif [ -n "${BASH_VERSION}" ]; then
	shopt -qs nullglob
	shopt -qs extglob
fi

PKG=hprofile
VERSION=6.0.0
CONFDIR=/etc/${PKG}
RUNDIR=/var/run
NULL=/dev/null
name=${PKG}

#
# @FUNCTION: Print error message to stderr
#
error()
{
	local prefix=${name:+" ${CLR_MAG}${name}:${CLR_RST}"}
	echo -e${eol+n} "${eol+\n} ${CLR_RED}*${CLR_RST}${prefix} ${@}" >&2
}

#
# @FUNCTION: Print error message to stderr & exit
#
die()
{
	local ret=${?}; error "${@}"; exit ${ret}
}

#
# @FUNCTION: Print info message to stdout
#
info()
{
	local prefix=${name:+" ${CLR_YLW}${name}:${CLR_RST}"}
	echo -e${eol+n} "${eol+\n} ${CLR_BLU}*${CLR_RST}${prefix} ${@}"
}

#
# @FUNCTION: Print warn message to stdout
#
warn()
{
	local prefix=${name:+" ${CLR_RED}${name}:${CLR_RST}"}
	echo -e${eol+n} "${eol+\n} ${CLR_YLW}*${CLR_RST}${prefix} ${@}"
}

#
# @FUNCTION: Print begin message to stdout
#
begin()
{
	[ -n "${eol}" ] && echo
:	${eol=0}
	local prefix=${name:+"${CLR_MAG}[${CLR_RST} ${CLR_BLU}${name}${CLR_RST}: ${CLR_MAG}]${CLR_RST}"}
	echo -en " ${prefix} ${@}"
}

#
# @FUNCTION: Print end message to stdout
#
end()
{
	local suffix
	case "${1-0}" in
		(0) suffix="${CLR_BLU}[${CLR_RST} ${CLR_GRN}Ok${CLR_RST} ${CLR_BLU}]${CLR_RST}";;
		(*) suffix="${CLR_YLW}[${CLR_RST} ${CLR_RED}No${CLR_RST} ${CLR_YLW}]${CLR_RST}";;
	esac
	shift
	echo -en " ${@} ${suffix}\n"
	eol=
}

yesno()
{
	case "${1:-NO}" in
	(0|[Dd][Ii][Ss][Aa][Bb][Ll][Ee]|[Oo][Ff][Ff]|[Ff][Aa][Ll][Ss][Ee]|[Nn][Oo])
		return 1;;
	(1|[Ee][Nn][Aa][Bb][Ll][Ee]|[Oo][Nn]|[Tt][Rr][Uu][Ee]|[Yy][Ee][Ss])
		return 0;;
	(*)
		return 2;;
	esac
}

#
# @FUNCTION: Colors handler
#
eval_colors()
{
	local BLD ESC FGD clr
	BLD='1;' ESC='\e[' FGD='3'

	for clr in 0:BLK 1:RED 2:GRN 3:YLW 4:BLU 5:MAG 6:CYN 7:WHT; do
		eval CLR_${clr#*:}="'${ESC}${BLD}${FGD}${clr%:*}m'"
	done
	CLR_RST="${ESC}0m"
}

if [ -t 1 ] && yesno "${COLOR:-Yes}"; then
	eval_colors
fi

usage()
{
	cat <<-EOH
  usage: ${PKG} [options] <type>[.<profile>]

    -d, --debug              Enable debug mode
    -t, --type               Print all known profiles types
    -c, --current=<type>     Print the current profile <type>
    -p, --profile=<type>     Print the profile that would be used
    -l, --list=<type>        Print all available <type> profiles
    -s, --stop=<type>        Stop the current <type> profile
    -u, --user=<user>        Use a user profile instead of system wide
    -h, --help               Print this help message
    -v, --version            Print pkgname-version_string
    -r, --revert=<type>      Revert to the previous known <type> profile
    -f, --force              Apply profile regardless of the current one

  <type>                     Switch to the currently valid <type> profile
  <type>.<profile>           Switch to the given <type>.<profile> profile
EOH
${1:+exit ${1}}
}

version()
{
	echo -e "${CLR_BLU}${PKG}${CLR_RST} version ${CLR_MAG}${VERSION}${CLR_RST}"
	exit
}

#
# @FUNCTION: Validity verification of a profile type
# @ARGS: <type>
#
verify_profile()
{
	[ "${#}" = 1  ] && [ -n "${1}"   ] || die "Invalid profile type ${1}"
	[ -n "${PROFILE}" -a -f "${PROFILE}" ] && return
	PROFILE="${DIR}/${1}-functions"
	[ -f "${PROFILE}" ] && source "${PROFILE}"
}

#
# @FUNCTION: Print the profile to be used
# @ARGS: <type> <profile>
#
get_profile()
{
	run_cmd start_test && return
	[ -n "${DEFAULT}" ] && echo "${DEFAULT}" || echo -n "${PROFILES%% *}"
}

#
# @FUNCTION: Print the currently selected profile
# @ARGS: <type>
#
current_profile()
{
	local file="${RUNDIR}/${1}-current"
	[ -s "${file}" ] && echo $(cat "${file}")
}

#
# @FUNCTION: run script passed as positional parameter 1
# @ARGS: <script> <args>
#
run_cmd()
{
	if command -v ${1} >${NULL} 2>&1; then
		eval ${1}
	else
		return 111
	fi
}

#
# @FUNCTION: Stop the current profile of the given type
# @ARGS: <inherited>|<type> <profile>
#
stop_profile()
{
	local cmd ret p c
	c="$(current_profile)"
	[ -n "${c}" ] && p="${c}" || return 0

	begin "Stoping ${CLR_GRN}${1}.${CLR_YLW}${p}${CLR_RST} profile"
	for cmd in stop_pre stop_${p} stop_post; do
		run_cmd "${cmd}"
		case ${?} in
			(111) ;;
			(*) ret=$((${ret}+${?}));;
		esac
	done
	end ${ret}
	[ ${ret} = 0 ] || return ${ret}
	echo        > "${RUNDIR}/${1}-current"
	echo "${p}" > "${RUNDIR}/${1}-previous"
}

#
# @FUNCTION: Revert to the previous profile of the given type
# @ARGS: <type>
#
revert_profile()
{
	local file="${RUNDIR}/${1}-previous" p
	[ -s "${file}" ] && p=$(cat "${file}") || return
	[ -n "${p}" ] && start_profile "${1}" "${p}"
}

#
# @FUNCTION: Print all known profile types
#
profile_type()
{
	local f t
	for f in "${DIR}"/*-functions; do
		t="${f##*/}"; echo -n "${t%-*} "
	done
	echo
	exit
}

#
# @FUNCTION: Swap files with extension .<profile> in the appropriate profile
# directory, and sym-link files appropriately.
# @ARGS: <inherited>
#
swap_files()
{
	local src dest
	for src in $(find "${DIR}/${1}" -name "*.${2}"); do
		dest="${src#${DIR}/${1}}"; dest="${dest%.${2}}"
		if [ -e "${dest}" ] && [ ! -h "${dest}" ]; then
			if ! diff "${dest}" "${src}" >${NULL}; then
				mv -f "${dest}" "${dest}\~" ||
				{ error "Failed to back up ${dest} file"; continue; }
			fi
		fi
		ln -fs "${src}" "${dest}" || error "Failed to restore ${src} to ${dest}"
	done
}

#
# @FUNCTION: Apply profile
# @ARGS: <type> <profile>
#
start_profile()
{
	local cmd ret
	# Stop profile
	stop_profile "${1}"
	# Start profile
	begin "Starting ${CLR_GRN}${1}.${CLR_YLW}${2}${CLR_RST} profile"
	for cmd in start_pre start_${2} start_post; do
		run_cmd "${cmd}"
		case ${?} in
			(111) ;;
			(*) ret=$((${ret}+${?}));;
		esac
	done
	end ${ret}
	# Save profile
	[ ${ret} = 0 ] && echo "${2}" >"${RUNDIR}/${1}-current" || return ${ret}
	# Sym-link files if available
	if [ -d "${DIR}/${1}" ]; then
		swap_files "${1}" "${2}" || error "Failed to swap ${1}.${2} files"
	fi
}

[ ${#} -ge 1 ] || usage 2

DIR="${CONFDIR}"

ARGS="$(getopt \
	-l debug,force,help,version,profile:,type,current:,list:,stop:,revert,user: \
	-o \?dfhvtc:p:l:s:r:u: -n ${PKG} -s sh -- "${@}")"
[ ${?} = 0 ] || usage 1
eval set -- "${ARGS}"

while true; do
	case "${1}" in
		(-d|--debug) set -x ; shift;;
		(-f|--force) FORCE=1; shift;;
		('-?'|-h|--help) usage 0;;
		(-v|--version) version;;
		(-t|--type)	profile_type;;
		(-c|--current)
			verify_profile  "${2}"
			current_profile "${2}"
			exit;;
		(-p|--profile)
			verify_profile "${2}"
			get_profile    "${2}"
			exit;;
		(-l|--list)
			verify_profile "${2}"
			echo "${PROFILES}"; exit;;
		(-s|--stop)
			verify_profile "${2}"
			stop_profile "${2}"
			exit;;
		(-r|--revert)
			verify_profile "${2}"
			revert_profile "${2}"
			exit;;
		(-u|--user) DIR="${HOME}/.${PKG}";;
		(*) shift; break;;
	esac
done

set ${@/./ }
NAME="${2}"
TYPE="${1}"

[ -n "${TYPE}" ] || die "Empty/null profile type"
verify_profile "${TYPE}" || die "Invalid profile type"

[ -n "${NAME}" ] || NAME=$(get_profile "${TYPE}")
[ -n "${NAME}" ] || die "Could not find ${NAME} profile ${TYPE}"

CURRENT=$(current_profile "${TYPE}")
if [ "${NAME}" = "${CURRENT}" ]; then
	[ -n "${FORCE}" ] || exit 0
fi
start_profile "${TYPE}" "${NAME}"

#
# vim:fenc=utf-8:ft=sh:ci:pi:sts=0:sw=4:ts=4:
#
