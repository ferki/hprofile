#!/bin/bash
#
# Header: hprofile
# Aythor:
# 	Copyright (c) 2003-2004 Martin Aspeli <optilude@gmx/net>
# 	Copyright (c) 2014 -tclover <tokiclover@gmail.com>
# License: GPL-2
#

shopt -qs nullglob
shopt -qs extglob

declare -A PKG
PKG=(
	[name]=hprofile
	[version]=3.0.3
	[confdir]=/etc/hprofile
	[logfile]=/var/log/hprofile.log
)

if [[ -f "${PKG[confdir]}/${PKG[name]}.conf" ]]; then
	declare -A HPROFILE
	source "${PKG[confdir]}/${PKG[name]}.conf"
fi

function error {
	if [[ "${HPROFILE[logfile]}" ]]; then
		echo "$(date '+%Y-%m-%d-%T') ${PKG[name]}: ${@}" >>"${HPROFILE[logfile]}"
	else
		echo -e "\e[1;31m* \e[0m${PKG[name]}: ${@}" >&2
	fi
}

function die {
	local ret=$?
	error "$@"
	return $ret
}

function info {
	if [[ "${HPROFILE[logfile]}" ]]; then
		echo "$(date '+%Y-%m-%d-%T') ${PKG[name]}: ${@}" >>"${HPROFILE[logfile]}"
	else
		echo -e "\e[1;32m \e[0m${PKG[name]}: ${@}"
	fi
}

function usage {
	cat <<-EOH
  ${PKG[name]}-${PKG[version]}
  usage: ${PKG[name]} [options] <type>|<type>.<profile>

    -t, --type               Print all known profiles types
    -c, --current=<type>     Print the current profile <type>
    -p, --profile=<type>     Print the profile that would be used
    -l, --list=<type>        Print all available <type> profiles
    -s, --stop=<type>        Stop the current <type> profile
    -r, --revert=<type>      Revert to the previous <type> profile
    -u, --user=\$USER         Use a user profile instead of system wide
    -h, --help               Print this help message
    -v, --version            Print pkgname-version_string
    -r, --revert=<type>      Revert to the previous known <type> profile
    -f, --force              Apply profile regardless of the current one

  <type>                     Switch to the currently valid <type> profile
  <type>.<profile>           Switch to the given <type>.<profile> profile
EOH
exit ${1:-?}
}

function version {
	echo "${PKG[name]}-${PKG[version]}"
	exit
}

# @DESCRIPTION: Verify validity of a profile type
# @ARGUMENTS: <type>
function verify-profile {
	test "${#}" -eq 1 -a -n "${1}" -a "${1}" != "--" ||
		die "Invalid profile type ${1}"
	test -n "${dir}" -a -d "${dir}" || local dir="${PROFILE[dir]}/profiles/${1}"

	test -e "${dir}/ptest"   -o -f "${dir}/profiles" -o \
		 -f "${dir}"/default -o -e "${dir}"/pre-start -o \
		 -e "${dir}"/post-start || die "Invalid profile type ${2}"
}

# @DESCRIPTION: Print the profile to be used. This will call hpdet if no profile
# was specified or invalid if not.
# @Arguments: <type> <profile>
function get-profile {
	local dir="${PROFILE[dir]}/profiles/${1}" name="${2}"

	test -z "${name}" -a -s "${dir}/ptest"   && name=$(run-script "${dir}/ptest")
	test -z "${name}" -a -s "${dir}/default" && name=$(< "${dir}/default")

	test -z "${name}" -a -s "${profiles}" &&
		name=$(sed -nre '0,/^[a-zA-Z].*/p' "${profiles}")

	echo "${name}"
}

# @DESCRIPTION: Print the currently selected profile
# @ARGUMENTS: <type>
function current-profile {
	local file="${PROFILE[dir]}/profiles/${1}/current"
	[[ -s "${file}" ]] && echo $(< "${file}")
}

# @DESCRIPTION: run script passed as positional parameter 1
# @ARGUMENTS: <script> <args>
function run-script {
	test "${#}" -ge 1 -a -s "${1}" || return
	local file="${1}" head="${1%/*}" tail="${1##*/}"

	local src name bash=$(type -p bash)
	for src in "${dir}"/*([:alnum:])*.bash; do
		[[ -s "${src}" ]] || continue
		name=${src##*/}
		eval "${name//\./_}"="${src}"
	done

	function script {
		source "${file}"
	}
	shift
	script "$@"
}

# @DESCRIPTION: Stop the current profile of the given type
# @ARGUMENTS: <inherited>|<type> <profile>
function stop-profile {
	[[ -n "${1}" ]] && local type="${1}" dir="${PROFILE[dir]}/profiles/${1}"
	[[ -n "${2}" ]] && local profile="${2}"

	echo -e "Stoping \e[1;32m${type}.\e[1;33m${profile}\e[0m profile"

	if [[ -s "${dir}/stop" ]]; then
		function stop {
			source "${dir}/stop"
		}
	fi
	for scr in pre-stop scripts/${profile}.stop post-stop; do
		if [[ -s "${dir}/${scr}" ]]; then
			run-script "${dir}/${scr}" "${profile}" ||
				die "Failed to run ${type}/${scr} script"
		fi
	done
	echo              > "${PROFILE[dir]}/profiles/${type}/current"
	echo "${profile}" > "${PROFILE[dir]}/profiles/${type}/previous"
}

# @DESCRIPTION: Revert to the previous profile of the given type
# @ARGUMENTS: <type>
function revert-profile {
	local file="${PROFILE[dir]}/profiles/${1}/previous"
	[[ -s "${file}" ]] && local previous=$(< "${file}") || return
	[[ "${previous}" ]] && start-profile "${1}" "${previous}"
}

# @DESCRIPTION: Print all known profile types
function profile-type {
	for dir in "${PROFILE[dir]}/profiles"/*([:alpha:])*; do
		verify-profile "${dir}" && echo -n "${dir##*/} "
	done
	echo
	exit
}

# @DESCRIPTION: Print all valid profiles of the given type
# @ARGUMENTS: <type>
function profile-list {
	local dir="${PROFILE[dir]}/profiles/${1}"

	if [[ -s "${dir}/profiles" ]]; then
		echo $(< "${dir}/profiles")
	else
		local file name
		for file in "${dir}"/scripts/*([:alpha:])*.start; do
			name="${file##*/}"
			echo "${name%.start}"
		done
	fi
	exit
}

# @DESCRIPTION: Swap files with extension .<profile> in the appropriate profile
# directory, and sym-link files appropriately.
# @ARGUMENTS: <inherited>
function swap-files {
	local filesdir="${dir}/files" src dest

	for src in $(find "${filesdir}" -name "*.${profile}"); do
		dest="${src#${filesdir}}"
		dest="${dest%.${profile}}"
		if test -e "${dest}" -a ! -h "${dest}"; then
			if ! diff "${dest}" "${src}" >/dev/null; then
				mv -f "${dest}"{,.bak} || die "Failed to back up ${dest} file"
			fi
		fi
		ln -fs "${src}" "${dest}" || die "Failed to restore ${src} to ${dest}"
	done
}

# @DESCRIPTION: Apply profile
# @ARGUMENTS: <type> <profile>
function start-profile {
	local type="${1}" profile="${2}"
	local dir="${PROFILE[dir]}/profiles/${1}"
:	${dir="${dir%/}"}

	echo -e "Starting \e[1;32m${type}.\e[1;33m${profile}\e[0m profile"

	# Stop profile
	stop-profile
	# Start profile
	if [[ -s "${dir}/start" ]]; then
		function start {
			source "${dir}/start"
		}
	fi
	for scr in pre-start scripts/${profile}.start post-start; do
		if [[ -s "${dir}/${scr}" ]]; then
			run-script "${dir}/${scr}" "${profile}" ||
				die "Failed to run ${type}/${scr} script"
		fi
	done
	# Sym-link files if available
	if [[ -d "${dir}/files" ]]; then
		swap-files || die "Failed to swap ${type}.${profile} files"
	fi
	# Save profile
	echo "${profile}" >"${PROFILE[dir]}/profiles/${type}/current"
}

[[ "${1}" ]] || usage 2

declare -A PROFILE
PROFILE=(
	[dir]="${PKG[confdir]}"
)

declare -a opt
opt=(
	"-s" "bash"
	"-n" "${PKG[name]}"
	"-o" "?fhvtc:p:l:s:r:u:"
	"-l" "force,help,version,profile:,type,current:,list:,stop:,revert,user:"
)
opt=($(getopt "${opt[@]}" -- "${@}" || usage))
eval set -- "${opt[@]}"

while (( $# > 1 )); do
	case "${1}" in
		(-f|--force)
			PROFILE[force]=1
			shift
			;;
		('-?'|-h|--help) usage 0;;
		(-v|--version) version;;
		(-t|--type)	profile-type;;
		(-c|--current)
			verify-profile "${2}"
			current-profile "${2}"
			exit
			;;
		(-p|--profile)
			verify-profile "${2}"
			get-profile "${2}"
			exit
			;;
		(-l|--list)
			verify-profile "${2}"
			profile-list "${2}"
			;;
		(-s|--stop)
			verify-profile "${2}"
			stop-profile "${2}" && exit || die "Could not stop ${2} profile"
			;;
		(-r|--revert)
			verify-profile "${2}"
			revert-profile "${2}"
			exit ${?}
			;;
		(-u|--user) PROFILE[dir]="${HOME}/.${PKG[name]}";;
		(--) shift;;
		(*) usage 2;;
	esac
done

arg=(${1/./ })
PROFILE[name]="${arg[1]}"
PROFILE[type]="${arg[0]}"
unset arg

[[ "${PROFILE[type]}" ]] || die "Empty/null profile type"
verify-profile "${PROFILE[type]}"

[[ "${PROFILE[name]}" ]] || PROFILE[name]=$(get-profile "${PROFILE[type]}")
[[ "${PROFILE[name]}" ]] ||
	die "Could not find ${PROFILE[name]} profile ${PROFILE[type]}"

PROFILE[current]=$(current-profile "${PROFILE[type]}")
if [[ "${PROFILE[name]}" == "${PROFILE[current]}" ]]; then
	[[ "${PROFILE[force]}" ]] || exit 0
fi
start-profile "${PROFILE[type]}" "${PROFILE[name]}"

unset HPROFILE PKG PROFILE

#
# vim:fenc=utf-8:ft=sh:ci:pi:sts=0:sw=4:ts=4:
#
