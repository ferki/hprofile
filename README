1. What is a hprofile *profile*?

A hprofile *profile* is just a directory in `/etc/hprofile/profiles' named
<type> in the subsequent sections which has either:

	0. of course, a profile <type> can combine one or all the following files;
    1. ptest: a script that is used, if present, to determine which sub-profile,
	   or a <profile> of <type> profile, to run;
	2. profiles: a list of valid <(sub-)profile> profiles;
	3. default: a file which contains the default <(sub-)profile> name;
	4. pre-start: a script to be run before running a subsequent <(sub-)profile;
	5. post-start: a script to be run after running a subsequent <(sub-)profile;

Basically, a profile type is just a collection of scripts and files to use when
running a command like `hprofile <type>.<profile>' or simple `hprofile <type' if
a `ptest' or `default' file is present.

To be more complete on the description of profile type, it can also have:

    6. scripts/<profile>.{start,stop}: a sub profile named <profile> can have a
	   particular start/stop script;
	7. start/stop: a profile type can have a common start/stop script usable in
	   in particular (sub) profile(s); if present a particular (sub) profile can
	   reference/use them by simply executing `start/stop <args>' because those
	   two scripts will be sourced in hprofile easing execution;
	8. script_name.bash: if present `script_name_bash' environment variable will
	   hold the path `$sys_confdir/hprofile/profiles/<type>/script_name.bash' to
	   ease execution or sourcing of extra scripts/files;
	9. files/<mirror-files>: if present, this directory can hold a mirror of the
	   filesystem with `.profile' suffix appended to each file; so those files
	   will be moved to right place without suffix, actually sym-linked, when 
	   <profile> sub-profile become active.

As you can guess, a profile type can be anything from a simple script to multiple
scripts with mirror files.

    10. No executable bit (+x) is needed here as in the original fork to avoid
	    unecessary multiple sub-shells which cause more letency/memory/disk seek
		to be able to only run a few commands and move a few files! 
		So, the executable bit is unset by default for every single script in this
		fork as everything is sourced to hprofile. Executable bit can be set if
		necessary, so script direct executing is possible. Just test with `time'
		helper with a single file and multiple files to see for yourself.

2. How to write a hprofile *profile*?

Just read or consult disk, power, rfkill and vga profiles which make use of the
previous points. It's fairly simple to write one in a matter of minutes. Maybe,
the *sourcing everything* is obscure, but practical examples it becomes easy.

So, hprofile acts as a master script and sources scripts when need be. This has
the advantage to benefit the internal helpers for *external* use but can lead to
a disaster quickly with poorly written script which can bring the *master* to its
kneels. It does remind of something, isn't it?


BIG-FAT-WARNING: USE AT YOUR OUWN RISK, EVERYTHING IS GIVEN 'AS IS'

